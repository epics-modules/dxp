# dxpMED.db
# Author:  Mark Rivers
# Date:    January 9, 2005
# Database for multi-element detector with DXP2X MCAs from XIA.

record(bo,"$(P)EraseAll") {
        field(VAL,"1")
        field(OUT,"$(P)$(MCAALL).ERAS PP MS")
        field(FLNK,"$(P)StatusAllOnce")
}

record(bo,"$(P)EraseStart") {
        field(VAL,"1")
        field(OUT,"$(P)$(MCAALL).ERST PP MS")
        field(FLNK,"$(P)SetAcquireBusy")
}

record(bo,"$(P)StartAll") {
        field(VAL,"1")
        field(OUT,"$(P)$(MCAALL).STRT PP MS")
        field(FLNK,"$(P)SetAcquireBusy")
}

# Need to process status all once when acqusition first starts, to read status so that
# Acquiring gets set to 1, so StatusAll processes
grecord(bo,"$(P)SetAcquireBusy") {
        field(VAL, "1")
        field(OUT, "$(P)DoStatusAll PP MS")
        field(FLNK,"$(P)SetAcquireBusy2")
}

grecord(bo,"$(P)SetAcquireBusy2") {
        field(DISV,"1")
        field(SDIS,"$(P)AcquireBusy NPP NMS")
        field(OMSL,"closed_loop")
        field(DOL,"1")
        field(OUT,"$(P)AcquireBusy PP MS")
        field(FLNK,"$(P)SetClientWait")
}

record(busy,"$(P)AcquireBusy") {
}

record(bo,"$(P)StopAll") {
        field(VAL,"1")
        field(OUT,"$(P)$(MCAALL).STOP PP MS")
}

record(ao,"$(P)PresetReal") {
        field(PREC, "2")
}

record(ao,"$(P)PresetLive") {
        field(PREC, "2")
}

record(bi,"$(P)Acquiring") {
        field(INP,"$(P)$(MCAALL).ACQG CP MS")
        field("ZNAM","Done")
        field("ONAM","Acquiring")
}

record(ai,"$(P)ElapsedReal") {
        field(INP,"$(P)$(MCAALL).ERTM CP MS")
        field(PREC, "2")
}

record(ai,"$(P)ElapsedLive") {
        field(INP,"$(P)$(MCAALL).ELTM CP MS")
        field(PREC, "2")
}

record(ai,"$(P)DeadTime") {
        field(PREC, "2")
}

grecord(bo,"$(P)StatusAll") {
        field(SCAN,".5 second")
        field(DISV,"0")
        field(SDIS,"$(P)Acquiring NPP NMS")
        field(VAL, "1")
        field(OUT, "$(P)DoStatusAll PP MS")
}

grecord(bo,"$(P)StatusAllOnce") {
        field(VAL, "1")
        field(OUT, "$(P)DoStatusAll PP MS")
}

grecord(bo,"$(P)DoStatusAll") {
        field(FLNK,"$(P)$(MCAALL).PROC PP MS")
}

record(bo,"$(P)ReadAll") {
        field(SCAN,"1 second")
        field(DISV,"0")
        field(SDIS,"$(P)Acquiring NPP NMS")
        field(VAL, "1")
        field(OUT, "$(P)DoReadAll PP MS")
}

grecord(bo,"$(P)DoReadAll") {
}

record(bo,"$(P)ReadDXPs") {
        field(SCAN,"Passive")
        field(VAL, "1")
        field(OUT, "$(P)DoReadDXPs PP MS")
}

grecord(bo,"$(P)DoReadDXPs") {
}

record(bo,"$(P)ReadDXPBaselines") {
        field(SCAN,"Passive")
        field(VAL, "1")
        field(OUT, "$(P)DoReadDXPBaselines PP MS")
}

grecord(bo,"$(P)DoReadDXPBaselines") {
}

record(bo,"$(P)ReadDXPBaselineHistories") {
        field(SCAN,"Passive")
        field(VAL, "1")
        field(OUT, "$(P)DoReadDXPBaselineHistories PP MS")
}

grecord(bo,"$(P)DoReadDXPBaselineHistories") {
}

grecord(ai,"$(P)BaselineHistoryTimes") {
        field(VAL,"1.0")
        field(PREC,"1")
}

record(bo,"$(P)ReadDXPTraces") {
        field(SCAN,"Passive")
        field(VAL, "1")
        field(OUT, "$(P)DoReadDXPTraces PP MS")
}

grecord(bo,"$(P)DoReadDXPTraces") {
}

grecord(ai,"$(P)TraceWaits") {
        field(VAL,"0.1")
        field(PREC,"1")
}

record(bo,"$(P)CopyTRIG_PKTIM") {
}

record(bo,"$(P)CopyTRIG_GAPTIM") {
}

record(bo,"$(P)CopyFAST_TRIG") {
}

record(bo,"$(P)CopyPKTIM") {
}

record(bo,"$(P)CopyGAPTIM") {
}

record(bo,"$(P)CopySLOW_TRIG") {
}

record(bo,"$(P)CopyMAX_WIDTH") {
}

record(bo,"$(P)CopyBASE_CUT_PCT") {
}

record(bo,"$(P)CopyBASE_CUT_ENBL") {
}

record(bo,"$(P)CopyBASE_THRESH") {
}

record(bo,"$(P)CopyBASE_THRESH_ENBL") {
}

record(bo,"$(P)CopyPGAIN") {
}

record(bo,"$(P)CopyBASE_LEN") {
}

record(bo,"$(P)CopyEMAX") {
}

record(bo,"$(P)CopyADC_RULE") {
}

# These records are for waiting for IDL or other clients
grecord(bo,"$(P)EnableClientWait") {
        field(ZNAM,"Disable")
        field(ONAM,"Enable")
}

grecord(bo,"$(P)SetClientWait") {
        field(DISV,"0")
        field(SDIS,"$(P)EnableClientWait NPP NMS")
        field(OMSL,"closed_loop")
        field(DOL,"1")
        field(OUT,"$(P)ClientWait PP MS")
}

grecord(busy,"$(P)ClientWait") {
}

# These records are not used, but they must exist for the IDL EPICS_MED class
grecord(ao,"$(P)Dwell") {}
grecord(bo,"$(P)ChannelAdvance") {}
grecord(ao,"$(P)Prescale") {}
