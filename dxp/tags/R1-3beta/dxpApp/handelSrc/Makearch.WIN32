# -*- Makefile -*-
#
# Compiles will look like this:
# $(CC) $(CFLAG_COMPILE) $(CFLAGS) [specific defs] [source file(s)]
#
# Links will look like this:
# $(LINK) $(LINK_PRE_FLAGS) $(LINK_OUT) [objects] [libs: $(LINK_LIBS), etc] $(LINK_POST_FLAGS)
# where $(LINK_LIBS) is pulled in from the enclosing sub-make file.
#

ROOT := c:\temp\handel_releases\Source\handel
ROOT_CLEAN := c:/temp/handel_releases/Source/handel

LIB_ROOT        := $(ROOT)\\lib
LIB_ROOT_CLEAN  := $(ROOT_CLEAN)/lib

SYSTEM_LIB_ROOT := c:/windows/system32

# Probably only useful at XIA
SPLINT          := splint

# The ':' the separator isn't supposed
# to work on Win32 versions of make, but
# it is the *only* separator that seems
# to work here.
export VPATH := ../inc:../lib:../t

# The extension of an object file
OBJ := obj
# The extension of a library
LIB := dll
# For Linux machines...
PREFIX_LIB :=

# The system delete/rm command
# We assume that if you are running on
# Windows w/ 'make' then you probably have
# Cygwin and have 'rm' as well.
RM := rm
# The system cd/chdir command
CD := cd
# The system copy command
SYSTEM_COPY = cp $(LIB_ROOT_CLEAN)/$(NAME).$(LIB) $(SYSTEM_LIB_ROOT)

# This should be the compiler
#CC     := c:\\progra~1\\micros~2\\vc98\\bin\\cl.exe
CC := cl

# This should be the flag the compiler provides
# for just generating an object file, instead of
# an executable
CFLAG_COMPILE := -c

# This should be any flags you want to pass to the compiler,
# not including the previous flag
CFLAGS := -W4 -nologo -MTd -GX -Od -FD -GZ -Zi \
          -I"c:\program files\microsoft visual studio\vc98\include" \
          -I"..\inc" -I"..\t"

CFLAGS_OPTIMIZE := -W4 -nologo -MTd -GX -FD -O1 \
	-I"c:\program files\microsoft visual studio\vc98\include" \
	-I"..\inc" -I"..\t"

# There are the EXCLUDES which are passed to the compiler
EXCLUDE_DEFS :=

ifeq ($(DXP4C), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_DXP4C"
endif
ifeq ($(DXP4C2X), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_DXP4C2X"
endif
ifeq ($(DXPX10P), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_DXPX10P"
endif
ifeq ($(POLARIS), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_POLARIS"
endif
ifeq ($(DGF200), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_DGF200"
endif
ifeq ($(UDXP), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_UDXP"
endif
ifeq ($(UDXPS), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_UDXPS"
endif
ifeq ($(CAMAC), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_CAMAC"
endif
ifeq ($(EPP), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_EPP"
endif
ifeq ($(SERIAL), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_SERIAL"
endif
ifeq ($(USB), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_USB"
endif
ifeq ($(ARCNET), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_ARCNET"
endif
ifeq ($(PLX), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_PLX"
endif

# These are the global defines that all files should be compiled
# with
GLOBAL_DEFS := -D "XIA_STANDARD_MEM" -D "WIN32" -D "_DEBUG" \
                -D "_WINDOWS" -D "_MBCS" -D "_USRDLL" -D "__MEM_DBG__" \
                $(EXCLUDE_DEFS)

BUILD_VBA := true

# Library-specific flags
PLXLIB_FLAGS         := -D "PLXLIB_DEBUG" $(GLOBAL_DEFS)
PLXLIB_VBA_FLAGS     := -Fo"$(NAME).$(OBJ)" -D "WIN32_PLXLIB_VBA" $(PLXLIB_FLAGS)
ARCNET_FLAGS         := $(GLOBAL_DEFS)
CAMACDLL_FLAGS       := -D "CAMACDLL_EXPORTS" $(GLOBAL_DEFS)
EPPLIB_FLAGS         := $(GLOBAL_DEFS)
EPPLIB_VBA_FLAGS     := -Fo"$(NAME).$(OBJ)" -D "WIN32_EPPLIB_VBA" $(GLOBAL_DEFS)
SERIALLIB_FLAGS      := $(GLOBAL_DEFS)
SERIALLIB_VBA_FLAGS  := -Fo"$(NAME).$(OBJ)" -D "WIN32_SERIAL_VBA" $(GLOBAL_DEFS)
USBLIB_FLAGS         := $(GLOBAL_DEFS)
USBLIB_VBA_FLAGS     := -Fo"$(NAME).$(OBJ)" -D "WIN32_USBLIB_VBA" $(GLOBAL_DEFS)
MD_FLAGS             := -D "XIA_MD_MAKE_DLL" -D "MDDLL_EXPORTS" $(GLOBAL_DEFS)
DD_FLAGS             := -D "XERXES_MAKE_DLL" $(GLOBAL_DEFS)
XERXES_FLAGS         := -D "XERXES_MAKE_DLL" -D "XERXES_USE_DLL" $(GLOBAL_DEFS)
FDD_FLAGS            := -D "FDD_MAKE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)
FDD_VBA_FLAGS        := -Fo"$(NAME).$(OBJ)" -D "WIN32_FDD_VBA" -D "FDD_MAKE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)
PSL_FLAGS            := -D "PSL_MAKE_DLL" -D "XERXES_USE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)
HANDEL_FLAGS         := -D "XERXES_USE_DLL" -D "HANDEL_MAKE_DLL" -D "HANDEL_USE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)

# An important macro for the Handel VBA makefile because,
# normally, when $(CC) -c $(CFLAGS) src.c is run, src.obj is
# produced, but we want to produce src_vba.obj for all of the
# Handel files (VBA variant) without creating a billion different HANDEL_RUN_CONTROL_VBA_FLAGS, etc
# variables. To simplify: we need a way to make a custom -Fo"" flag for each Handel src file, w/o
# actually creating a separate set of flags.
base = $(basename $<)
#src_to_vba := -Fo"$(basename $<)_vba.$(OBJ)"

HANDEL_VBA_FLAGS     = -Fo"$(base)_vba.$(OBJ)" -D "WIN32_HANDEL_VBA" -D "HANDEL_MAKE_DLL" -D "HANDEL_USE_DLL" -D "XERXES_USE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)


# This should be the linker
#LINK := c:\\progra~1\\micros~2\\vc98\\bin\\link.exe
LINK := link

# Any flags that go before the object files in the linker pass
LINK_PRE_FLAGS := 


LINK_OUT := /out:"$(LIB_ROOT)\$(NAME).$(LIB)"

# The bulk of the linker flags
LINK_FLAGS := /dll /libpath:"$(LIB_ROOT)" /incremental:no \
                   /pdb:"$(NAME).pdb" /debug /machine:I386 \
                   /implib:"$(LIB_ROOT)\$(NAME).lib" /pdbtype:sept \
                   /libpath:"c:\program files\microsoft visual studio\vc98\lib" \
                   $(LINK_OUT)

ifeq ($(PROFILE), true)
LINK_FLAGS := $(LINK_FLAGS) /profile
endif

# Stock Win32 libraries
SYSTEM_LIBS := kernel32.lib user32.lib gdi32.lib winspool.lib \
               comdlg32.lib advapi32.lib shell32.lib ole32.lib \
               oleaut32.lib uuid.lib odbccp32.lib

# Llink libraries required for the various libraries
ARCNET_LINK_LIB        := $(SYSTEM_LIBS)
CAMACDLL_LINK_LIB      := $(SYSTEM_LIBS)
EPPLIB_LINK_LIB        := dlportio.lib $(SYSTEM_LIBS)
EPPLIB_VBA_LINK_LIB    := dlportio.lib $(SYSTEM_LIBS)
SERIALLIB_LINK_LIB     := cdrvhf32.lib cdrvxf32.lib cdrvdl32.lib $(SYSTEM_LIBS)
SERIALLIB_VBA_LINK_LIB := cdrvhf32.lib cdrvxf32.lib cdrvdl32.lib $(SYSTEM_LIBS)
USBLIB_LINK_LIB        := $(SYSTEM_LIBS)
PLXLIB_LINK_LIB        := plxapi.lib $(SYSTEM_LIBS)
# New protocols will go here...

#MD_LINK_LIB          := camacdll.lib epplib.lib seriallib.lib usblib.lib arcnetlib.lib $(SYSTEM_LIBS)
MD_LINK_LIB          := $(SYSTEM_LIBS)
ifeq ($(CAMAC), true)
MD_LINK_LIB          := $(MD_LINK_LIB) camacdll.lib
endif
ifeq ($(EPP), true)
MD_LINK_LIB          := $(MD_LINK_LIB) epplib.lib
endif
ifeq ($(SERIAL), true)
MD_LINK_LIB          := $(MD_LINK_LIB) seriallib.lib
endif
ifeq ($(USB), true)
MD_LINK_LIB          := $(MD_LINK_LIB) usblib.lib
endif
ifeq ($(ARCNET), true)
MD_LINK_LIB          := $(MD_LINK_LIB) arcnetlib.lib
endif
ifeq ($(PLX), true)
MD_LINK_LIB          := $(MD_LINK_LIB) plxlib.lib
endif

DD_LINK_LIB          := md.lib $(SYSTEM_LIBS)
#XERXES_LINK_LIB      := md.lib g200.lib polaris.lib x10p.lib dxp4c.lib dxp4c2x.lib udxps.lib udxp.lib \
#                        $(SYSTEM_LIBS)
FDD_LINK_LIB         := md.lib $(SYSTEM_LIBS)
FDD_VBA_LINK_LIB     := md.lib $(SYSTEM_LIBS)
PSL_LINK_LIB         := xerxes.lib fdd.lib xw.lib $(SYSTEM_LIBS)
#HANDEL_LINK_LIB      := x10p_psl.lib g200_psl.lib dxp4c2x_psl.lib udxps_psl.lib udxp_psl.lib polaris_psl.lib \
#                        xerxes.lib fdd.lib $(SYSTEM_LIBS)
#HANDEL_VBA_LINK_LIB  := x10p_psl.lib g200_psl.lib dxp4c2x_psl.lib udxps_psl.lib udxp_psl.lib polaris_psl.lib \
#                        xerxes.lib fdd.lib $(SYSTEM_LIBS)

XERXES_LINK_LIB      := md.lib $(SYSTEM_LIBS)
HANDEL_LINK_LIB      := md.lib fdd.lib xerxes.lib $(SYSTEM_LIBS)
HANDEL_VBA_LINK_LIB  := md.lib fdd.lib xerxes.lib $(SYSTEM_LIBS)

ifeq ($(DXP4C), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) dxp4c.lib
endif
ifeq ($(DXP4C2X), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) dxp4c2x.lib
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) dxp4c2x_psl.lib
HANDEL_VBA_LINK_LIB  := $(HANDEL_VBA_LINK_LIB) dxp4c2x_psl.lib
endif
ifeq ($(DXPX10P), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) x10p.lib
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) x10p_psl.lib
HANDEL_VBA_LINK_LIB  := $(HANDEL_VBA_LINK_LIB) x10p_psl.lib
endif
ifeq ($(POLARIS), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) polaris.lib
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) polaris_psl.lib
HANDEL_VBA_LINK_LIB  := $(HANDEL_VBA_LINK_LIB) polaris_psl.lib
endif
ifeq ($(DGF200), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) g200.lib
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) g200_psl.lib
HANDEL_VBA_LINK_LIB  := $(HANDEL_VBA_LINK_LIB) g200_psl.lib
endif
ifeq ($(UDXP), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) udxp.lib
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) udxp_psl.lib
HANDEL_VBA_LINK_LIB  := $(HANDEL_VBA_LINK_LIB) udxp_psl.lib
endif
ifeq ($(UDXPS), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) udxps.lib
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) udxps_psl.lib
HANDEL_VBA_LINK_LIB  := $(HANDEL_VBA_LINK_LIB) udxps_psl.lib
endif