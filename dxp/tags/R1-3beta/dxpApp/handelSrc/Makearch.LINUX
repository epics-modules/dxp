# -*- Makefile -*-
#
# Compiles will look like this:
# $(CC) $(CFLAG_COMPILE) $(CFLAGS) [specific defs] [source file(s)]
#
# Links will look like this:
# $(LINK) $(LINK_PRE_FLAGS) $(LINK_OUT) [objects] [libs: $(LINK_LIBS), etc] $(LINK_POST_FLAGS)
# where $(LINK_LIBS) is pulled in from the enclosing sub-make file.
#

ROOT           := /home/patrick/xia/software/handel

LIB_ROOT       := $(ROOT)/lib

SYSTEM_LIB_ROOT:= /usr/local/lib

export VPATH := ../inc:../lib:../t

# The extension of an object file
OBJ := o
# The extension of a library
LIB := so
# Library name prefix. Only used on *nix systems
PREFIX_LIB := lib

# The system delete/rm command
# We assume that if you are running on
# Windows w/ 'make' then you probably have
# Cygwin and have 'rm' as well.
RM := rm
# The system cd/chdir command
CD := cd
# The system copy command
#SYSTEM_COPY = cp $(LIB_ROOT)/$(NAME).$(LIB) $(SYSTEM_LIB_ROOT)
SYSTEM_COPY := 

# This should be the compiler
CC := gcc

# This should be the flag the compiler provides
# for just generating an object file, instead of
# an executable
CFLAG_COMPILE := -c

# This should be any flags you want to pass to the compiler,
# not including the previous flag
CFLAGS := -Wall -Wno-format-y2k -Wno-comment -Wno-unused-function -Wno-unused-variable -g -ansi -O0 \
          -I "../inc" -I "../t"

# There are the EXCLUDES which are passed to the compiler
EXCLUDE_DEFS :=

ifeq ($(DXP4C), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_DXP4C"
endif
ifeq ($(DXP4C2X), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_DXP4C2X"
endif
ifeq ($(DXPX10P), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_DXPX10P"
endif
ifeq ($(POLARIS), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_POLARIS"
endif
ifeq ($(DGF200), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_DGF200"
endif
ifeq ($(UDXP), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_UDXP"
endif
ifeq ($(UDXPS), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_UDXPS"
endif
ifeq ($(CAMAC), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_CAMAC"
endif
ifeq ($(EPP), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_EPP"
endif
ifeq ($(SERIAL), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_SERIAL"
endif
ifeq ($(USB), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_USB"
endif
ifeq ($(ARCNET), false)
EXCLUDE_DEFS := $(EXCLUDE_DEFS) -D "EXCLUDE_ARCNET"
endif

# These are the global defines that all files should be compiled
# with
GLOBAL_DEFS := -D "XIA_STANDARD_MEM" -D "_DEBUG" \
               $(EXCLUDE_DEFS)

BUILD_VBA := false

# Library-specific flags
ARCNET_FLAGS         := $(GLOBAL_DEFS)
CAMACDLL_FLAGS       := -D "CAMACDLL_EXPORTS" $(GLOBAL_DEFS)
EPPLIB_FLAGS         := $(GLOBAL_DEFS)
#EPPLIB_VBA_FLAGS     := -Fo"$(NAME).$(OBJ)" -D "WIN32_EPPLIB_VBA" $(GLOBAL_DEFS)
SERIALLIB_FLAGS      := $(GLOBAL_DEFS)
USBLIB_FLAGS         := $(GLOBAL_DEFS)
#USBLIB_VBA_FLAGS     := -Fo"$(NAME).$(OBJ)" -D "WIN32_USBLIB_VBA" $(GLOBAL_DEFS)
MD_FLAGS             := -D "XIA_MD_MAKE_DLL" -D "MDDLL_EXPORTS" $(GLOBAL_DEFS)
DD_FLAGS             := -D "XERXES_MAKE_DLL" $(GLOBAL_DEFS)
XERXES_FLAGS         := -D "XERXES_MAKE_DLL" -D "XERXES_USE_DLL" $(GLOBAL_DEFS)
FDD_FLAGS            := -D "FDD_MAKE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)
#FDD_VBA_FLAGS        := -Fo"$(NAME).$(OBJ)" -D "WIN32_FDD_VBA" -D "FDD_MAKE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)
PSL_FLAGS            := -D "PSL_MAKE_DLL" -D "XERXES_USE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)
HANDEL_FLAGS         := -D "XERXES_USE_DLL" -D "HANDEL_MAKE_DLL" -D "HANDEL_USE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)

# An important macro for the Handel VBA makefile because,
# normally, when $(CC) -c $(CFLAGS) src.c is run, src.obj is
# produced, but we want to produce src_vba.obj for all of the
# Handel files (VBA variant) without creating a billion different HANDEL_RUN_CONTROL_VBA_FLAGS, etc
# variables. To simplify: we need a way to make a custom -Fo"" flag for each Handel src file, w/o
# actually creating a separate set of flags.
#base = $(basename $<)
#src_to_vba := -Fo"$(basename $<)_vba.$(OBJ)"

#HANDEL_VBA_FLAGS     = -Fo"$(base)_vba.$(OBJ)" -D "WIN32_HANDEL_VBA" -D "HANDEL_MAKE_DLL" -D "HANDEL_USE_DLL" -D "XERXES_USE_DLL" -D "FDD_USE_DLL" $(GLOBAL_DEFS)


# This should be the linker
#LINK := c:\\progra~1\\micros~2\\vc98\\bin\\link.exe
LINK := gcc

# Any flags that go before the object files in the linker pass
LINK_PRE_FLAGS := 


LINK_OUT := -o $(LIB_ROOT)/$(PREFIX_LIB)$(NAME).$(LIB)

# The bulk of the linker flags
LINK_FLAGS := -shared -fPIC -g -L $(LIB_ROOT) $(LINK_OUT)

# Stock Win32 libraries
SYSTEM_LIBS := -lc

# Llink libraries required for the various libraries
ARCNET_LINK_LIB     := $(SYSTEM_LIBS)
CAMACDLL_LINK_LIB   := $(SYSTEM_LIBS)
#EPPLIB_LINK_LIB     := dlportio.lib $(SYSTEM_LIBS)
EPPLIB_LINK_LIB     := $(SYSTEM_LIBS)
#EPPLIB_VBA_LINK_LIB := dlportio.lib $(SYSTEM_LIBS)
#SERIALLIB_LINK_LIB  := cdrvhf32.lib cdrvxf32.lib $(SYSTEM_LIBS)
SERIALLIB_LINK_LIB  := $(SYSTEM_LIBS)
USBLIB_LINK_LIB     := $(SYSTEM_LIBS)
# New protocols will go here...

#MD_LINK_LIB          := camacdll.lib epplib.lib seriallib.lib usblib.lib arcnetlib.lib $(SYSTEM_LIBS)
MD_LINK_LIB          :=
ifeq ($(CAMAC), true)
MD_LINK_LIB          := $(MD_LINK_LIB) -lcamac
endif
ifeq ($(EPP), true)
MD_LINK_LIB          := $(MD_LINK_LIB) -lepplib
endif
ifeq ($(SERIAL), true)
MD_LINK_LIB          := $(MD_LINK_LIB) -lseriallib
endif
ifeq ($(USB), true)
MD_LINK_LIB          := $(MD_LINK_LIB) -lusblib
endif
ifeq ($(ARCNET), true)
MD_LINK_LIB          := $(MD_LINK_LIB) -larcnetlib
endif
#MD_LINK_LIB          := -lcamac -lepplib -lseriallib -lusblib -larcnetlib $(SYSTEM_LIBS)
#DD_LINK_LIB          := md.lib $(SYSTEM_LIBS)
DD_LINK_LIB          := -lmd $(SYSTEM_LIBS)
#XERXES_LINK_LIB      := md.lib g200.lib polaris.lib x10p.lib dxp4c.lib dxp4c2x.lib udxps.lib udxp.lib \
#                        $(SYSTEM_LIBS)

XERXES_LINK_LIB      := -lmd
HANDEL_LINK_LIB      := -lfdd -lxerxes
ifeq ($(DXP4C), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) -ldxp4c
endif
ifeq ($(DXP4C2X), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) -ldxp4c2x
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) -ldxp4c2x_psl
endif
ifeq ($(DXPX10P), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) -lx10p
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) -lx10p_psl
endif
ifeq ($(POLARIS), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) -lpolaris
HANDEL_LIBK_LIB      := $(HANDEL_LINK_LIB) -lpolaris_psl
endif
ifeq ($(DGF200), true)
XERXES_LINK_LIB      := $(XERXES_LINK_LIB) -lg200
HANDEL_LINK_LIB      := $(HANDEL_LINK_LIB) -lg200_psl
endif
ifeq ($(UDXP), true)
# This hardware not supported on Linux
endif
ifeq ($(UDXPS), true)
# This hardware not supported on Linux
endif

#XERXES_LINK_LIB      := -lmd -lg200 -lpolaris -lx10p -ldxp4c -ldxp4c2x -ludxps -ludxp \
#                        $(SYSTEM_LIBS)
#FDD_LINK_LIB         := md.lib $(SYSTEM_LIBS)
FDD_LINK_LIB         := -lmd $(SYSTEM_LIBS)
#FDD_VBA_LINK_LIB     := md.lib $(SYSTEM_LIBS)
#PSL_LINK_LIB         := xerxes.lib fdd.lib xw.lib $(SYSTEM_LIBS)
PSL_LINK_LIB         := -lxerxes -lfdd $(SYSTEM_LIBS)
#HANDEL_LINK_LIB      := x10p_psl.lib g200_psl.lib dxp4c2x_psl.lib udxps_psl.lib udxp_psl.lib polaris_psl.lib \
#                        xerxes.lib fdd.lib $(SYSTEM_LIBS)
#HANDEL_LINK_LIB      := -lx10p_psl -lg200_psl -ldxp4c2x_psl -ludxps_psl -ludxp_psl -lpolaris_psl -lxerxes -lfdd \
#                        $(SYSTEM_LIBS)
#HANDEL_VBA_LINK_LIB  := x10p_psl.lib g200_psl.lib dxp4c2x_psl.lib udxps_psl.lib udxp_psl.lib polaris_psl.lib \
#                        xerxes.lib fdd.lib $(SYSTEM_LIBS)

